// Copyright (c) 2015-2020, Swiss Federal Institute of Technology (ETH Zurich)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
// 
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
apply plugin: 'com.android.application'
apply plugin: 'com.diffplug.gradle.spotless'

android {
    compileSdkVersion 28


    defaultConfig {
        applicationId "ch.ethz.karajan.thermalsc"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.5.2"
        ndk.abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        externalNativeBuild {
            cmake {
                // The covert library requires C++17 features.
                cppFlags "-std=c++1z -fexceptions"

                // Build the covert library and the jni_thermal-sc static library.
                targets "covert", "jni_thermal-sc"

                // The c++_{static,shared} STL has full support of C++17 features.
                // Also, force the CMake defined C++ standards.
                // 
                // WARNING: This option will only work for CMake version ~> 3.8, 
                // which is not the one bundled with the SDK. An external CMake
                // binary has to be provided, down below.
                arguments "-DANDROID_STL=c++_shared",
                          "-DANDROID_TOOLCHAIN=clang",
                          "-DANDROID_ARM_MODE=arm",
                          "-DCMAKE_CXX_STANDARD=17",
                          "-DCMAKE_CXX_STANDARD_REQUIRED=ON",
                          "-DCMAKE_CXX_EXTENSIONS=OFF"
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    externalNativeBuild {
        cmake {
            // Do not use the bundled CMake, use a newer one.
            version "3.15.0-rc2"
            // The path to the master CMake configuration, relative to the
            // path of this file.
            path "CMakeLists.txt"
        }
    }
}

spotless {
    java {
        removeUnusedImports()
        target '**/*.java'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation project(":lib")
}
